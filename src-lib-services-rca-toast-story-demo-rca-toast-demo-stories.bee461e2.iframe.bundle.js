"use strict";(self.webpackChunk_rca_design_system_library=self.webpackChunk_rca_design_system_library||[]).push([[7187],{"./libs/rca-design-system-library/src/lib/components/rca-notification/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{c:()=>_rca_notification_module__WEBPACK_IMPORTED_MODULE_1__.c});__webpack_require__("./libs/rca-design-system-library/src/lib/components/rca-notification/rca-notification.component.ts");var _rca_notification_module__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./libs/rca-design-system-library/src/lib/components/rca-notification/rca-notification.module.ts")},"./libs/rca-design-system-library/src/lib/services/rca-toast/story-demo/rca-toast-demo.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllToasts:()=>AllToasts,Base:()=>Base,default:()=>rca_toast_demo_stories});var http=__webpack_require__("./node_modules/@angular/common/fesm2022/http.mjs"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),overlay=__webpack_require__("./node_modules/@angular/cdk/fesm2022/overlay.mjs"),portal=__webpack_require__("./node_modules/@angular/cdk/fesm2022/portal.mjs");var Subject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js"),timer=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/timer.js");let RcaToastComponent=class RcaToastComponent{constructor(overlayRef){this.overlayRef=overlayRef,this.toasts=[],this.DEFAULT_DELAY=1e4,this.max=6}add(options){this.toasts.length>=this.max&&this.clearOldestToastInStack();const delay=void 0===options.delay?this.DEFAULT_DELAY:options.delay,toast={closeSubject:new Subject.x,options};return this.toasts=[toast,...this.toasts],delay>0&&(toast.delaySubscription=(0,timer.H)(delay).subscribe((()=>{this.removeByToast(toast)}))),{options:toast.options,onClose:toast.closeSubject.asObservable(),close:()=>this.removeByToast(toast)}}removeByIndex(index){this.toasts[index].delaySubscription?.unsubscribe();const closeSubject=this.toasts[index].closeSubject;closeSubject.next(),closeSubject.complete(),this.toasts.splice(index,1),this.toasts.length||this.overlayRef.detach()}removeByToast(toast){const index=this.toasts.indexOf(toast);index>=0&&this.removeByIndex(index)}clearOldestToastInStack(){const index=this.toasts.slice().reverse().findIndex((toast=>toast.delaySubscription));index>=0&&this.removeByIndex(this.toasts.length-1-index)}static#_=this.ctorParameters=()=>[{type:overlay.Iu}]};RcaToastComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"rca-toast",template:'<div class="padding-right-xxs">\n  <rca-notification\n    *ngFor="let toast of toasts; index as i"\n    config="toast"\n    [title]="toast.options.title"\n    [type]="toast.options.type"\n    (closed)="removeByIndex(i)"\n  >\n    {{ toast.options.message }}\n  </rca-notification>\n</div>\n'}),(0,tslib_es6.w6)("design:paramtypes",[overlay.Iu])],RcaToastComponent);let RcaToastService=class RcaToastService{constructor(overlay,injector){this.overlay=overlay,this.injector=injector}add(toast){if(this.resetInstance(),!this.instance){this.overlayRef=this.overlay.create({hasBackdrop:!1,positionStrategy:this.overlay.position().global().bottom().right()});const componentPortal=new portal.C5(RcaToastComponent,null,core.Injector.create({parent:this.injector,providers:[{provide:overlay.Iu,useValue:this.overlayRef}]}));this.instance=this.overlayRef.attach(componentPortal).instance}return this.instance.add(toast)}resetInstance(){this.instance&&!this.instance.toasts.length&&(this.instance=void 0)}static#_=this.ctorParameters=()=>[{type:overlay.aV},{type:core.Injector}]};RcaToastService=(0,tslib_es6.gn)([(0,core.Injectable)(),(0,tslib_es6.w6)("design:paramtypes",[overlay.aV,core.Injector])],RcaToastService);let RcaToastDemoComponent=class RcaToastDemoComponent{constructor(){this.nombreFermetures=0,this.toasts=[],this.toastService=(0,core.inject)(RcaToastService),this.toastWrapperClass="display-flex flex-has-gutter flex-wrap"}showSuccessToaster(){const toast=this.toastService.add({type:"success",message:"Je suis un toast de succès"});this.toasts.push(toast),this.toasts[this.toasts.length-1].onClose.subscribe((()=>this.nombreFermetures++))}showErrorToaster(){const toast=this.toastService.add({type:"error",message:"Je suis un toast d’alert"});this.toasts.push(toast),toast.onClose.subscribe((()=>this.nombreFermetures++))}showWarningToaster(){const toast=this.toastService.add({type:"warning",message:"Je suis un toast d’avertissement Je suis un toast d’avertissementJe suis un toast d’avertissement."});this.toasts.push(toast),toast.onClose.subscribe((()=>this.nombreFermetures++))}showInfoToaster(){const toast=this.toastService.add({type:"info",title:"Information complémentaire",message:"Morbi ac eros eget turpis sodales volutpat sed vel odio. Donec accumsan ante commodo nunc iaculis, sit amet cursus."});this.toasts.push(toast),toast.onClose.subscribe((()=>this.nombreFermetures++))}showInfiniteToast(){const toast=this.toastService.add({type:"info",title:"Information à durée indéterminée",delay:0,message:"Morbi ac eros eget turpis sodales volutpat sed vel odio. Donec accumsan ante commodo nunc iaculis, sit amet cursus."});this.toasts.push(toast),toast.onClose.subscribe((()=>this.nombreFermetures++))}removeLastToast(){this.toasts.pop()?.close()}static#_=this.propDecorators={toastWrapperClass:[{type:core.HostBinding,args:["class"]}]}};RcaToastDemoComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"rca-toast-demo",template:'<button rca-button id="toast-success-button" (click)="showSuccessToaster()">Success</button>\n<button rca-button id="toast-error-button" (click)="showErrorToaster()">Alert</button>\n<button rca-button id="toast-warning-button" (click)="showWarningToaster()">Avertissment</button>\n<button rca-button id="toast-info-button" (click)="showInfoToaster()">Info</button>\n<button rca-button id="toast-infinite-button" (click)="showInfiniteToast()">Durée infinie</button>\n<button rca-button id="toast-removal-button" (click)="removeLastToast()">Supprimer le dernier toast</button>\n<p class="flex-auto">Nombre d\'évenements de fermeture : {{ nombreFermetures }}</p>\n'})],RcaToastDemoComponent);let RcaSimpleToastDemoComponent=class RcaSimpleToastDemoComponent{constructor(){this.type="success",this.toastService=(0,core.inject)(RcaToastService)}showToaster(){this.toastService.add({type:this.type,message:this.message,delay:this.delay,title:this.title})}static#_=this.propDecorators={type:[{type:core.Input}],delay:[{type:core.Input}],title:[{type:core.Input}],message:[{type:core.Input}]}};RcaSimpleToastDemoComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"rca-simple-toast-demo",template:'<button rca-button id="toast-button" (click)="showToaster()">\n    {{ type | titlecase }} toast\n  </button>'})],RcaSimpleToastDemoComponent);var rca_button=__webpack_require__("./libs/rca-design-system-library/src/lib/components/rca-button/index.ts"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),icon=__webpack_require__("./node_modules/@angular/material/fesm2022/icon.mjs"),icons=__webpack_require__("./libs/rca-design-system-library/src/lib/icons/index.ts"),rca_notification=__webpack_require__("./libs/rca-design-system-library/src/lib/components/rca-notification/index.ts");let RcaToastModule=class RcaToastModule{};RcaToastModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[RcaToastComponent],imports:[common.CommonModule,icon.Ps,icons.i,overlay.U8,rca_notification.c],providers:[RcaToastService]})],RcaToastModule);const rca_toast_demo_stories={title:"Popups/Toast",decorators:[(0,dist.moduleMetadata)({declarations:[RcaToastDemoComponent,RcaSimpleToastDemoComponent],imports:[http.JF,rca_button.Nf,RcaToastModule]})],parameters:{docs:{description:{component:"Le composant **Toast** est un élément d'interface utilisateur conçu pour afficher des messages éphémères, généralement des notifications ou des alertes, de manière non intrusive. Il offre une expérience utilisateur rapide et informative sans interrompre le flux principal de l'application."}}}},Base=(args=>({template:'<rca-simple-toast-demo [title]="title" [message]="message" [delay]="delay" [type]="type" />',props:args})).bind({});Base.args={type:"success",message:"Message de test",title:"Titre de test",delay:1e4},Base.argTypes={type:{options:["success","error","warning","info"],control:{type:"select"},description:"Type de toast.",defaultValue:"success",table:{defaultValue:{summary:"success"}}},message:{description:"Message affiché dans le toast."},title:{description:"Titre affiché dans le toast."},delay:{description:"Durée d'affichage du toast (en ms). Si mis à 0, le toast reste ouvert indéfiniment",defaultValue:1e4,table:{defaultValue:{summary:1e4}}}};const AllToasts=(args=>({component:RcaToastDemoComponent,template:"<rca-toast-demo/>",props:args})).bind({});AllToasts.args={}}}]);